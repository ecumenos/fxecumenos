// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	fxrf "github.com/ecumenos/fxecumenos/fxrf"
	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// Writer is an autogenerated mock type for the Writer type
type Writer struct {
	mock.Mock
}

// SetLogger provides a mock function with given fields: logger
func (_m *Writer) SetLogger(logger *zap.Logger) {
	_m.Called(logger)
}

// WriteError provides a mock function with given fields: ctx, msg, cause, opts
func (_m *Writer) WriteError(ctx context.Context, msg string, cause error, opts ...fxrf.ResponseBuildOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msg, cause)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, error, ...fxrf.ResponseBuildOption) error); ok {
		r0 = rf(ctx, msg, cause, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteFail provides a mock function with given fields: ctx, data, opts
func (_m *Writer) WriteFail(ctx context.Context, data interface{}, opts ...fxrf.ResponseBuildOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteFail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...fxrf.ResponseBuildOption) error); ok {
		r0 = rf(ctx, data, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteSuccess provides a mock function with given fields: ctx, payload, opts
func (_m *Writer) WriteSuccess(ctx context.Context, payload interface{}, opts ...fxrf.ResponseBuildOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, payload)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteSuccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...fxrf.ResponseBuildOption) error); ok {
		r0 = rf(ctx, payload, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWriter creates a new instance of Writer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Writer {
	mock := &Writer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
